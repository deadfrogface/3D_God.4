#!/usr/bin/env python3
"""
3D_God V3 Setup Script
Automated installation and configuration
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path
import json
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SetupManager:
    """Manages the complete setup process for 3D_God V3"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.venv_path = self.project_root / "venv"
        self.config_file = self.project_root / "config.json"
        
    def run_setup(self):
        """Run complete setup process"""
        logger.info("üê∏ Starting 3D_God V3 Setup...")
        
        try:
            # Step 1: Create virtual environment
            self.create_virtual_environment()
            
            # Step 2: Install dependencies
            self.install_dependencies()
            
            # Step 3: Create project structure
            self.create_project_structure()
            
            # Step 4: Create configuration
            self.create_configuration()
            
            # Step 5: Create stub files
            self.create_stub_files()
            
            # Step 6: Create launch scripts
            self.create_launch_scripts()
            
            # Step 7: Test installation
            self.test_installation()
            
            logger.info("üéâ Setup completed successfully!")
            self.show_completion_message()
            
        except Exception as e:
            logger.error(f"Setup failed: {e}")
            sys.exit(1)
            
    def create_virtual_environment(self):
        """Create Python virtual environment"""
        logger.info("Creating virtual environment...")
        
        if self.venv_path.exists():
            logger.info("Virtual environment already exists, skipping...")
            return
            
        try:
            subprocess.run([
                sys.executable, "-m", "venv", str(self.venv_path)
            ], check=True)
            logger.info("‚úÖ Virtual environment created")
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to create virtual environment: {e}")
            raise
            
    def install_dependencies(self):
        """Install Python dependencies"""
        logger.info("Installing dependencies...")
        
        # Determine pip path
        if os.name == 'nt':  # Windows
            pip_path = self.venv_path / "Scripts" / "pip"
        else:  # Unix/Linux/Mac
            pip_path = self.venv_path / "bin" / "pip"
            
        # Upgrade pip first
        try:
            subprocess.run([
                str(pip_path), "install", "--upgrade", "pip"
            ], check=True)
        except subprocess.CalledProcessError as e:
            logger.warning(f"Failed to upgrade pip: {e}")
            
        # Install requirements
        requirements_file = self.project_root / "requirements.txt"
        if requirements_file.exists():
            try:
                subprocess.run([
                    str(pip_path), "install", "-r", str(requirements_file)
                ], check=True)
                logger.info("‚úÖ Dependencies installed from requirements.txt")
            except subprocess.CalledProcessError as e:
                logger.error(f"Failed to install requirements: {e}")
                raise
        else:
            logger.warning("requirements.txt not found, installing basic dependencies...")
            basic_deps = ["PySide6", "numpy", "Pillow", "requests"]
            for dep in basic_deps:
                try:
                    subprocess.run([
                        str(pip_path), "install", dep
                    ], check=True)
                except subprocess.CalledProcessError as e:
                    logger.warning(f"Failed to install {dep}: {e}")
                    
    def create_project_structure(self):
        """Create necessary project directories"""
        logger.info("Creating project structure...")
        
        directories = [
            "assets",
            "assets/clothing",
            "assets/nsfw",
            "assets/textures",
            "exports",
            "presets",
            "external",
            "external/triposr",
            "external/models",
            "logs",
            "tests",
            "blender",
            "ai",
            "core",
            "ui"
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            
        logger.info("‚úÖ Project structure created")
        
    def create_configuration(self):
        """Create default configuration file"""
        logger.info("Creating configuration...")
        
        config = {
            "project_name": "3D_God_V3",
            "version": "3.0.0",
            "paths": {
                "blender": self.find_blender_path(),
                "assets": str(self.project_root / "assets"),
                "exports": str(self.project_root / "exports"),
                "presets": str(self.project_root / "presets"),
                "external": str(self.project_root / "external")
            },
            "ai_models": {
                "triposr": {
                    "enabled": True,
                    "model_path": str(self.project_root / "external" / "triposr" / "model.ckpt"),
                    "stub_mode": True
                },
                "juggernaut": {
                    "enabled": True,
                    "stub_mode": True
                }
            },
            "nsfw": {
                "enabled_by_default": True,
                "assets_path": str(self.project_root / "assets" / "nsfw")
            },
            "export": {
                "default_format": "fbx",
                "embed_textures": True,
                "metahuman_compatible": False
            },
            "ui": {
                "theme": "dark",
                "window_size": [1200, 800]
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
            
        logger.info("‚úÖ Configuration created")
        
    def find_blender_path(self) -> str:
        """Find Blender installation path"""
        possible_paths = [
            # Windows
            "C:/Program Files/Blender Foundation/Blender 3.6/blender.exe",
            "C:/Program Files/Blender Foundation/Blender 3.5/blender.exe",
            "C:/Program Files/Blender Foundation/Blender 3.4/blender.exe",
            # Linux
            "/usr/bin/blender",
            "/usr/local/bin/blender",
            # macOS
            "/Applications/Blender.app/Contents/MacOS/Blender"
        ]
        
        for path in possible_paths:
            if Path(path).exists():
                return path
                
        return ""  # Return empty if not found
        
    def create_stub_files(self):
        """Create stub files for testing"""
        logger.info("Creating stub files...")
        
        # Create stub base character
        base_char = self.project_root / "assets" / "base_character.fbx"
        if not base_char.exists():
            base_char.write_text("# FBX stub file - replace with actual 3D model\n")
            
        # Create stub icon
        icon_file = self.project_root / "assets" / "icon.png"
        if not icon_file.exists():
            # Create a simple PNG stub (1x1 pixel PNG data)
            png_data = (
                b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde'
                b'\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\nIDATx\x9cc\xf8\x00\x00\x00\x01\x00\x01'
                b'\x00\x00\x00\x00IEND\xaeB`\x82'
            )
            icon_file.write_bytes(png_data)
            
        # Create stub TripoSR model
        triposr_model = self.project_root / "external" / "triposr" / "model.ckpt"
        if not triposr_model.exists():
            triposr_model.parent.mkdir(parents=True, exist_ok=True)
            triposr_model.write_text("# TripoSR model stub - replace with actual model\n")
            
        logger.info("‚úÖ Stub files created")
        
    def create_launch_scripts(self):
        """Create platform-specific launch scripts"""
        logger.info("Creating launch scripts...")
        
        # Windows batch file
        launch_bat = self.project_root / "launch.bat"
        with open(launch_bat, 'w') as f:
            f.write(f"""@echo off
echo üê∏ Starting 3D_God V3...
cd /d "{self.project_root}"
call venv\\Scripts\\activate
python main.py
pause
""")
            
        # Unix shell script
        launch_sh = self.project_root / "launch.sh"
        with open(launch_sh, 'w') as f:
            f.write(f"""#!/bin/bash
echo "üê∏ Starting 3D_God V3..."
cd "{self.project_root}"
source venv/bin/activate
python main.py
""")
            
        # Make shell script executable
        os.chmod(launch_sh, 0o755)
        
        logger.info("‚úÖ Launch scripts created")
        
    def test_installation(self):
        """Test basic installation"""
        logger.info("Testing installation...")
        
        try:
            # Test Python import
            test_script = """
import sys
sys.path.insert(0, '.')
from PySide6.QtWidgets import QApplication
from core.project_manager import ProjectManager
from core.state_manager import StateManager
from ai.froggy_assistant import FroggyAI
print("‚úÖ All core modules imported successfully")
"""
            
            if os.name == 'nt':  # Windows
                python_path = self.venv_path / "Scripts" / "python"
            else:  # Unix
                python_path = self.venv_path / "bin" / "python"
                
            result = subprocess.run(
                [str(python_path), "-c", test_script],
                capture_output=True,
                text=True,
                cwd=str(self.project_root)
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Installation test passed")
                logger.info(result.stdout)
            else:
                logger.error(f"Installation test failed: {result.stderr}")
                
        except Exception as e:
            logger.error(f"Installation test error: {e}")
            
    def show_completion_message(self):
        """Show completion message"""
        print("\n" + "="*60)
        print("üéâ 3D_God V3 Setup Complete!")
        print("="*60)
        print("\nüê∏ Froggy says: 'Your 3D character creator is ready!'")
        print("\nTo start 3D_God V3:")
        
        if os.name == 'nt':  # Windows
            print("  Double-click: launch.bat")
            print("  Or run: venv\\Scripts\\activate && python main.py")
        else:  # Unix
            print("  Run: ./launch.sh")
            print("  Or: source venv/bin/activate && python main.py")
            
        print("\nüìÅ Project structure created:")
        print("  - assets/          # 3D models, textures, NSFW content")
        print("  - exports/         # Generated character exports")
        print("  - presets/         # Saved character presets")
        print("  - external/        # External tools (TripoSR)")
        print("  - logs/            # Application logs")
        
        print("\n‚öôÔ∏è Configuration:")
        print("  - Edit config.json to customize settings")
        print("  - Set Blender path if not auto-detected")
        
        print("\nü§ñ AI Features:")
        print("  - TripoSR: 3D mesh generation (stub mode)")
        print("  - Juggernaut: Text-to-image (stub mode)")
        print("  - Froggy AI: Your helpful assistant")
        
        print("\nüîß Next steps:")
        print("  1. Install Blender (required for full functionality)")
        print("  2. Download TripoSR model (optional, stub works)")
        print("  3. Run the application and start creating!")
        
        print("\nüìñ Documentation:")
        print("  - Check README.md for detailed instructions")
        print("  - Visit the GitHub repository for updates")
        
        print("\n" + "="*60)
        print("Happy character creating! üê∏")
        print("="*60 + "\n")

def main():
    """Main setup function"""
    setup = SetupManager()
    setup.run_setup()

if __name__ == "__main__":
    main()
