"""Project management and configuration"""
import json
import os
import sys
import subprocess
import logging
from pathlib import Path
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class ProjectManager:
    """Manages project structure, configuration, and assets"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.config_file = self.project_root / "config.json"
        self.config = self.load_config()
        
    def load_config(self) -> Dict[str, Any]:
        """Load configuration from file or create default"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"Failed to load config: {e}")
                
        return self.create_default_config()
    
    def create_default_config(self) -> Dict[str, Any]:
        """Create default configuration"""
        config = {
            "project_name": "3D_God_V3",
            "version": "3.0.0",
            "paths": {
                "blender": self.find_blender_path(),
                "assets": str(self.project_root / "assets"),
                "exports": str(self.project_root / "exports"),
                "presets": str(self.project_root / "presets"),
                "external": str(self.project_root / "external")
            },
            "ai_models": {
                "triposr": {
                    "enabled": True,
                    "model_path": str(self.project_root / "external" / "triposr" / "model.ckpt"),
                    "stub_mode": False  # Changed to False for real operation
                },
                "juggernaut": {
                    "enabled": True,
                    "stub_mode": False
                }
            },
            "nsfw": {
                "enabled_by_default": True,
                "assets_path": str(self.project_root / "assets" / "nsfw")
            },
            "export": {
                "default_format": "fbx",
                "embed_textures": True,
                "metahuman_compatible": False
            },
            "ui": {
                "theme": "dark",
                "window_size": [1200, 800]
            }
        }
        
        self.save_config(config)
        return config
    
    def save_config(self, config: Dict[str, Any]):
        """Save configuration to file"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Failed to save config: {e}")
    
    def find_blender_path(self) -> str:
        """Auto-detect Blender installation"""
        possible_paths = [
            # Windows
            "C:/Program Files/Blender Foundation/Blender 3.6/blender.exe",
            "C:/Program Files/Blender Foundation/Blender 3.5/blender.exe",
            "C:/Program Files/Blender Foundation/Blender 3.4/blender.exe",
            # Linux
            "/usr/bin/blender",
            "/usr/local/bin/blender",
            # macOS
            "/Applications/Blender.app/Contents/MacOS/Blender"
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return path
                
        return ""  # Return empty if not found
    
    def initialize_structure(self):
        """Create necessary project directories"""
        directories = [
            "assets",
            "assets/clothing",
            "assets/nsfw",
            "assets/textures",
            "assets/real_models",
            "assets/materials",
            "exports",
            "presets",
            "external",
            "external/triposr",
            "external/models",
            "logs",
            "tests",
            "blender",
            "ai",
            "core",
            "ui"
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            
        # Create real 3D files instead of stubs
        self.create_real_3d_files()
        logger.info("Project structure initialized")
    
    def create_real_3d_files(self):
        """Create proper 3D files instead of text placeholders"""
        logger.info("Creating real 3D files...")
        
        # Create base character using Blender or fallback
        self.create_base_character_with_blender()
        
        # Create placeholder images
        self.create_placeholder_images()
        
        # Create material files
        self.create_material_files()
    
    def create_base_character_with_blender(self):
        """Create a real base character mesh using Blender"""
        blender_path = self.config["paths"]["blender"]
        if not blender_path or not Path(blender_path).exists():
            logger.warning("Blender not found, creating basic OBJ fallback")
            self.create_basic_obj_character()
            return
        
        blender_script = '''
import bpy
import bmesh

# Clear scene
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Create base humanoid character
# Torso
bpy.ops.mesh.primitive_cylinder_add(radius=0.3, depth=1.0, location=(0, 0, 0.5))
torso = bpy.context.active_object
torso.name = "Torso"

# Head
bpy.ops.mesh.primitive_uv_sphere_add(radius=0.15, location=(0, 0, 1.2))
head = bpy.context.active_object
head.name = "Head"

# Arms
bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.6, location=(-0.4, 0, 0.8))
left_arm = bpy.context.active_object
left_arm.name = "LeftArm"
left_arm.rotation_euler[2] = 0.3

bpy.ops.mesh.primitive_cylinder_add(radius=0.08, depth=0.6, location=(0.4, 0, 0.8))
right_arm = bpy.context.active_object
right_arm.name = "RightArm"
right_arm.rotation_euler[2] = -0.3

# Legs
bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.8, location=(-0.15, 0, -0.4))
left_leg = bpy.context.active_object
left_leg.name = "LeftLeg"

bpy.ops.mesh.primitive_cylinder_add(radius=0.1, depth=0.8, location=(0.15, 0, -0.4))
right_leg = bpy.context.active_object
right_leg.name = "RightLeg"

# Join all parts
bpy.ops.object.select_all(action='SELECT')
bpy.context.view_layer.objects.active = torso
bpy.ops.object.join()

# Add basic UV mapping
bpy.context.active_object.select_set(True)
bpy.ops.object.mode_set(mode='EDIT')
bpy.ops.uv.smart_project()
bpy.ops.object.mode_set(mode='OBJECT')

# Add basic material
mat = bpy.data.materials.new(name="BaseMaterial")
mat.use_nodes = True
bsdf = mat.node_tree.nodes["Principled BSDF"]
bsdf.inputs[0].default_value = (0.8, 0.6, 0.4, 1.0)  # Skin color
bpy.context.active_object.data.materials.append(mat)

# Export as FBX
output_path = r"''' + str(self.project_root / "assets" / "base_character.fbx") + '''"
bpy.ops.export_scene.fbx(filepath=output_path, use_selection=True, embed_textures=True)

print(f"Base character created: {output_path}")
'''
        
        # Run Blender script
        try:
            result = subprocess.run([
                blender_path, "--background", "--python-expr", blender_script
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info("✅ Base character created with Blender")
            else:
                logger.warning("Blender script failed, falling back to OBJ")
                self.create_basic_obj_character()
        except Exception as e:
            logger.error(f"Blender operation failed: {e}")
            self.create_basic_obj_character()
    
    def create_basic_obj_character(self):
        """Create a basic OBJ character as fallback"""
        obj_path = self.project_root / "assets" / "base_character.obj"
        mtl_path = self.project_root / "assets" / "base_character.mtl"
        
        # Create a simple humanoid OBJ
        obj_content = '''# 3D_God V3 Base Character
mtllib base_character.mtl
usemtl BaseMaterial

# Vertices (simple humanoid shape)
v 0.0 0.0 0.0
v 0.3 0.0 0.0
v -0.3 0.0 0.0
v 0.0 1.0 0.0
v 0.2 1.0 0.0
v -0.2 1.0 0.0
v 0.0 1.5 0.0
v 0.15 1.5 0.0
v -0.15 1.5 0.0
v 0.0 1.65 0.0
v 0.4 0.8 0.0
v 0.6 0.8 0.0
v -0.4 0.8 0.0
v -0.6 0.8 0.0
v 0.15 0.3 0.0
v 0.15 -0.2 0.0
v -0.15 0.3 0.0
v -0.15 -0.2 0.0

# Texture coordinates
vt 0.0 0.0
vt 1.0 0.0
vt 0.5 1.0

# Normals
vn 0.0 0.0 1.0

# Faces (simplified humanoid)
f 1/1/1 2/1/1 5/1/1
f 1/1/1 5/1/1 3/1/1
f 4/1/1 5/1/1 7/1/1
f 4/1/1 7/1/1 6/1/1
f 7/1/1 8/1/1 10/1/1
f 7/1/1 10/1/1 9/1/1
f 10/1/1 11/1/1 12/1/1
f 5/1/1 13/1/1 14/1/1
f 6/1/1 15/1/1 16/1/1
f 17/1/1 18/1/1 19/1/1
f 19/1/1 20/1/1 17/1/1
'''
        
        with open(obj_path, 'w') as f:
            f.write(obj_content)
        
        # Create MTL file
        mtl_content = '''# Material for base character
newmtl BaseMaterial
Ka 0.2 0.2 0.2
Kd 0.8 0.6 0.4
Ks 0.3 0.3 0.3
Ns 10.0
'''
        
        with open(mtl_path, 'w') as f:
            f.write(mtl_content)
        
        logger.info("✅ Basic OBJ character created")

    def create_placeholder_images(self):
        """Create placeholder images for UI"""
        try:
            from PIL import Image, ImageDraw, ImageFont, ImageFilter
            import colorsys
            
            # Create placeholder for AI generation
            placeholder = self.project_root / "assets" / "placeholder.png"
            img = Image.new('RGB', (512, 512), color='#f0f0f0')
            draw = ImageDraw.Draw(img)
            
            # Add text
            try:
                font = ImageFont.truetype("arial.ttf", 48)
                small_font = ImageFont.truetype("arial.ttf", 24)
            except:
                font = ImageFont.load_default()
                small_font = ImageFont.load_default()
                
            text = "3D_GOD\nPLACEHOLDER"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (512 - text_width) // 2
            y = (512 - text_height) // 2 - 40
            
            # Add shadow
            draw.text((x+2, y+2), text, font=font, fill=(0, 0, 0, 128))
            draw.text((x, y), text, font=font, fill=(255, 255, 255))
            
            # Add border
            draw.rectangle([10, 10, 502, 502], outline='#cccccc', width=2)
            
            img.save(placeholder)
            logger.info("✅ Placeholder images created")
            
        except ImportError:
            logger.warning("PIL not available, skipping placeholder images")

    def create_material_files(self):
        """Create basic material definition files"""
        materials_dir = self.project_root / "assets" / "materials"
        materials_dir.mkdir(exist_ok=True)
        
        # Basic skin material
        skin_mtl = materials_dir / "skin.pbr"
        skin_content = {
            "name": "Basic Skin",
            "baseColor": [0.8, 0.6, 0.4],
            "metallic": 0.0,
            "roughness": 0.7,
            "normalScale": 1.0
        }
        
        with open(skin_mtl, 'w') as f:
            json.dump(skin_content, f, indent=2)
        
        logger.info("✅ Material files created")
    
    def get_asset_path(self, asset_type: str, filename: str = "") -> Path:
        """Get path to specific asset"""
        base_path = Path(self.config["paths"]["assets"])
        asset_path = base_path / asset_type / filename if filename else base_path / asset_type
        return asset_path
    
    def get_export_path(self, filename: str = "") -> Path:
        """Get path to export directory"""
        export_path = Path(self.config["paths"]["exports"])
        if filename:
            return export_path / filename
        return export_path
    
    def get_blender_path(self) -> str:
        """Get configured Blender path"""
        return self.config["paths"]["blender"]
    
    def is_blender_available(self) -> bool:
        """Check if Blender is available"""
        blender_path = self.get_blender_path()
        return bool(blender_path) and Path(blender_path).exists()
