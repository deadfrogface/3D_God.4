"""TripoSR integration for 3D mesh generation"""
import os
import subprocess
import logging
from pathlib import Path
from typing import Optional, Dict, Any
import shutil
import tempfile

logger = logging.getLogger(__name__)

class TripoSRHandler:
    """Handles TripoSR 3D mesh generation from images"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.external_path = self.project_root / "external"
        self.triposr_path = self.external_path / "triposr"
        self.model_path = self.triposr_path / "model.ckpt"
        self.output_path = self.project_root / "exports" / "ai_generated"
        
    def is_ready(self) -> bool:
        """Check if TripoSR is properly set up"""
        # Check if model exists
        if not self.model_path.exists():
            logger.warning(f"TripoSR model not found at {self.model_path}")
            return False
            
        # Check if TripoSR code exists
        if not self.triposr_path.exists():
            logger.warning(f"TripoSR directory not found at {self.triposr_path}")
            return False
            
        return True
        
    def generate_3d_mesh(self, image_path: str) -> str:
        """Generate 3D mesh from image using TripoSR"""
        
        if not self.is_ready():
            # Return stub output for now
            return self.generate_stub_mesh(image_path)
            
        try:
            # Ensure output directory exists
            self.output_path.mkdir(parents=True, exist_ok=True)
            
            # Generate unique output folder
            timestamp = str(int(os.path.getmtime(image_path)))
            output_folder = self.output_path / f"generation_{timestamp}"
            output_folder.mkdir(exist_ok=True)
            
            # Run TripoSR generation
            cmd = [
                "python", str(self.triposr_path / "generate.py"),
                "--input", image_path,
                "--output", str(output_folder),
                "--model", str(self.model_path)
            ]
            
            logger.info(f"Running TripoSR: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                cwd=str(self.triposr_path),
                timeout=300  # 5 minute timeout
            )
            
            if result.returncode == 0:
                # Find generated mesh
                mesh_files = list(output_folder.glob("*.obj")) + list(output_folder.glob("*.fbx"))
                if mesh_files:
                    mesh_path = str(mesh_files[0])
                    logger.info(f"TripoSR generation successful: {mesh_path}")
                    
                    # Also look for texture files
                    texture_files = list(output_folder.glob("*.png")) + list(output_folder.glob("*.jpg"))
                    if texture_files:
                        logger.info(f"Found textures: {[str(f) for f in texture_files]}")
                    
                    return mesh_path
                else:
                    raise Exception("No mesh files found in output")
            else:
                logger.error(f"TripoSR failed: {result.stderr}")
                raise Exception(f"TripoSR generation failed: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logger.error("TripoSR generation timed out")
            return self.generate_stub_mesh(image_path)
        except Exception as e:
            logger.error(f"TripoSR generation failed: {e}")
            return self.generate_stub_mesh(image_path)
            
    def generate_stub_mesh(self, image_path: str) -> str:
        """Generate stub mesh for testing when TripoSR is not available"""
        
        logger.info("Using stub mesh generation")
        
        # Create stub output directory
        stub_output = self.project_root / "exports" / "stub_generated"
        stub_output.mkdir(parents=True, exist_ok=True)
        
        # Generate unique filename based on input image
        image_name = Path(image_path).stem
        timestamp = str(int(os.path.getmtime(image_path)))
        output_name = f"{image_name}_stub_{timestamp}.obj"
        stub_obj = stub_output / output_name
        
        # Create a simple OBJ file as stub
        self.create_stub_obj(stub_obj, image_name)
        
        logger.info(f"Stub OBJ mesh created: {stub_obj}")
        return str(stub_obj)
        
    def create_stub_obj(self, output_path: Path, base_name: str):
        """Create a simple OBJ file as stub mesh"""
        
        # Create a simple humanoid shape (very basic)
        obj_content = f"""# 3D_God V3 Stub Mesh - {base_name}
# Generated by TripoSR Stub Mode

# Vertices
v 0.0 0.0 0.0
v 0.5 0.0 0.0
v -0.5 0.0 0.0
v 0.0 1.0 0.0
v 0.3 1.5 0.0
v -0.3 1.5 0.0
v 0.0 2.0 0.0
v 0.2 0.5 0.0
v -0.2 0.5 0.0
v 0.0 1.5 0.3
v 0.0 1.5 -0.3

# Texture coordinates
vt 0.0 0.0
vt 1.0 0.0
vt 0.5 1.0

# Normals
vn 0.0 0.0 1.0
vn 0.0 1.0 0.0
vn 1.0 0.0 0.0

# Faces (simplified humanoid shape)
f 1//1 2//1 4//1
f 1//1 4//1 3//1
f 4//1 5//1 7//1
f 4//1 7//1 6//1
f 2//1 8//1 4//1
f 3//1 4//1 9//1
f 5//1 10//1 7//1
f 6//1 7//1 11//1

# Material reference
mtllib {base_name}.mtl
usemtl default_material
"""
        
        with open(output_path, 'w') as f:
            f.write(obj_content)
            
        # Create accompanying MTL file
        mtl_path = output_path.with_suffix('.mtl')
        mtl_content = f"""# Material file for {base_name}
newmtl default_material
Ka 0.2 0.2 0.2
Kd 0.8 0.6 0.4
Ks 0.3 0.3 0.3
Ns 10.0
"""
        
        with open(mtl_path, 'w') as f:
            f.write(mtl_content)
            
    def generate_reference_image(self, text_prompt: str) -> str:
        """Generate reference image from text (stub implementation)"""
        
        logger.info(f"Generating reference image for: {text_prompt}")
        
        # For now, return a placeholder image path
        # In the future, this would use Juggernaut XL or similar
        
        placeholder = self.project_root / "assets" / "placeholder.png"
        if placeholder.exists():
            return str(placeholder)
        else:
            # Create a simple placeholder
            placeholder.parent.mkdir(exist_ok=True)
            self.create_placeholder_image(placeholder, text_prompt)
            return str(placeholder)
            
    def create_placeholder_image(self, output_path: Path, prompt: str):
        """Create a placeholder image with text"""
        
        try:
            from PIL import Image, ImageDraw, ImageFont
            import textwrap
            
            # Create image
            img = Image.new('RGB', (512, 512), color='lightgray')
            draw = ImageDraw.Draw(img)
            
            # Add text
            try:
                font = ImageFont.truetype("arial.ttf", 24)
            except:
                font = ImageFont.load_default()
                
            # Wrap text
            wrapped_text = textwrap.fill(f"Reference: {prompt}", width=30)
            
            # Draw text in center
            text_bbox = draw.textbbox((0, 0), wrapped_text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            x = (512 - text_width) // 2
            y = (512 - text_height) // 2
            
            draw.text((x, y), wrapped_text, font=font, fill='black')
            
            # Add border
            draw.rectangle([10, 10, 502, 502], outline='darkgray', width=2)
            
            img.save(output_path)
            logger.info(f"Placeholder image created: {output_path}")
            
        except ImportError:
            # If PIL not available, create a simple text file
            output_path.with_suffix('.txt').write_text(f"Reference Image Placeholder\n\nPrompt: {prompt}")
            logger.info(f"Placeholder text file created: {output_path.with_suffix('.txt')}")
