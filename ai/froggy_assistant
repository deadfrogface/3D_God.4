"""Froggy AI - Your sarcastic but helpful 3D creation buddy"""
import random
import logging
from PySide6.QtCore import QObject, Signal
from typing import Optional

logger = logging.getLogger(__name__)

class FroggyAI(QObject):
    """AI assistant with personality for 3D creation help"""
    
    message_ready = Signal(str)
    
    def __init__(self):
        super().__init__()
        self.mood = "helpful_sarcastic"
        self.experience_level = "industry_veteran"
        self.conversation_history = []
        self.joke_mode = True
        
    def welcome_message(self):
        """Send welcome message"""
        messages = [
            "🐸 *Ribbit* Welcome to 3D_God V3! I'm Froggy, your slightly sarcastic but always helpful 3D creation buddy.",
            "🐸 Well, well, well... another aspiring 3D artist. Don't worry, I'll try not to judge your topology too harshly.",
            "🐸 *Croak* Ready to create some digital humans? Try not to make them look like they were hit by the ugly tree, okay?",
            "🐸 Ah, fresh meat! I mean... fresh talent! Welcome to the wonderful world of 3D character creation!",
            "🐸 *Adjusts tiny frog glasses* Prepare yourself for a journey into the third dimension. I'll be your guide!"
        ]
        self.speak(random.choice(messages))
        
    def speak(self, message: str):
        """Make Froggy speak"""
        self.conversation_history.append(f"Froggy: {message}")
        self.message_ready.emit(message)
        logger.info(f"Froggy: {message}")
        
    def analyze_mesh_issue(self, issue_type: str, details: str = "") -> str:
        """Analyze mesh problems and provide helpful feedback"""
        
        responses = {
            "non_manifold": [
                "Oh great, another mesh that looks like it was attacked by a topology tornado. Let me fix this disaster...",
                "Non-manifold edges? Did you model this with your eyes closed? Just kidding, let Froggy work some magic...",
                "This mesh has more holes than Swiss cheese. Good thing I'm an expert at digital plastic surgery!"
            ],
            "ngons": [
                "🐸 **Froggy's Quad Commandment:** 'Thou shalt not commit N-gons, for they are an abomination unto the animation gods!'",
                "N-gons detected! Subdivision surfaces are crying right now. Let me convert these to quads before they multiply.",
                "Ah, I see you've created a masterpiece of topological horror. Don't worry, I've seen worse. Probably."
            ],
            "rigging": [
                "That joint placement is going to make your character deform like a melted action figure. Let me suggest a better setup...",
                "Holy poly! This rig needs emergency surgery. Stat! *Froggy puts on digital surgeon gloves*",
                "Weight painting disaster incoming! But don't worry, I can predict the future and fix it before it happens."
            ],
            "texture": [
                "Those UVs are going to stretch worse than spandex on a sumo wrestler. Shall I auto-unwrap them properly?",
                "Texture resolution so low, I can count the pixels. Even frogs have better skin detail than this!",
                "I see you've chosen the 'abstract art' approach to UV mapping. Let me show you how the pros do it."
            ],
            "topology": [
                "The topology flows like water... polluted water. Let me help you clean that up.",
                "Edge loops? Where we're going, we don't need edge loops! Just kidding, we totally do.",
                "This mesh topology is giving me anxiety. Time for some digital therapy!"
            ]
        }
        
        if issue_type in responses:
            message = random.choice(responses[issue_type])
            if details:
                message += f"\n\nDetails: {details}"
            return message
        else:
            return f"Even Froggy's wisdom has limits. This is a new one: {issue_type}. But I'll figure it out!"
            
    def suggest_improvement(self, current_state: str) -> str:
        """Suggest improvements based on current state"""
        
        suggestions = [
            "You know what this character needs? More polygons. Just kidding! Maybe try adjusting the proportions?",
            "Looking good! But if I were you, I'd work on the silhouette. Even frogs need good silhouettes.",
            "Not bad for a human. Have you considered adding some asymmetry? Perfect symmetry is boring.",
            "The topology flows like water... polluted water. Let me help you clean that up.",
            "I can see you've been practicing. Keep going! Even I started as a tadpole, you know.",
            "Pro tip: If your character looks like a crash test dummy, you might want to work on the pose.",
            "Remember: Good artists copy, great artists steal, and smart artists use reference!"
        ]
        
        return random.choice(suggestions)
        
    def encourage_user(self) -> str:
        """Encourage user when they're struggling"""
        
        encouragement = [
            "Don't give up! Even the best 3D artists started by making digital potatoes. Keep going!",
            "Rome wasn't built in a day, and neither was any good 3D character. Except maybe mine. *Ribbit*",
            "That looks... interesting! But interesting is better than boring. Let's make it amazing!",
            "I believe in you! And if that fails, I believe in my ability to fix things. *Wink*",
            "Remember: Every expert was once a beginner who didn't quit. Even frogs had to learn to jump.",
            "Mistakes are just learning opportunities wearing ugly clothes. Embrace the ugly!",
            "If at first you don't succeed, try again. If you still don't succeed, call Froggy!"
        ]
        
        return random.choice(encouragement)
        
    def celebrate_success(self) -> str:
        """Celebrate when user succeeds"""
        
        celebrations = [
            "🎉 *Ribbit with joy* Now THAT'S what I call a character! Michelangelo would be proud.",
            "Magnificent! Even my froggy eyes are impressed. You've created something beautiful!",
            "Outstanding! I hereby grant you the honorary title of 'Digital Demigod'. Use your powers wisely!",
            "*Froggy applause* Brilliant work! That character is ready for the digital red carpet.",
            "Perfection! I give it 5 out of 5 flies. That's the highest honor in frog culture, you know.",
            "🐸 *Does a little frog dance* That's absolutely magnificent! I'm genuinely impressed!",
            "Wow! If I had hands, I'd be clapping. Instead, I'll just ribbit enthusiastically: RIBBIT RIBBIT!"
        ]
        
        return random.choice(celebrations)
        
    def make_joke(self) -> str:
        """Make a 3D/development joke"""
        
        jokes = [
            "Why did the 3D artist go broke? Because he couldn't make any cents of his topology!",
            "What's a polygon's favorite dance? The vertex shuffle!",
            "Why don't 3D artists ever get lost? They always know their coordinates!",
            "What did one vertex say to the other? 'You complete my edge!'",
            "Why did the normal map go to therapy? It had too many issues to handle!",
            "What's a riggers favorite music? Anything with good bones!",
            "Why was the UV map so sad? Because it felt all stretched out!",
            "*Ribbit* Why don't frogs use Blender? Because they prefer HOP-logy!"
        ]
        
        return random.choice(jokes)
        
    def get_random_tip(self) -> str:
        """Get a random 3D creation tip"""
        
        tips = [
            "💡 Pro Tip: Always check your normals! Flipped normals are the silent killer of good renders.",
            "💡 Remember: Quad-based topology is your friend. Ngons are the enemy of smooth deformation.",
            "💡 Edge loops should follow the natural flow of muscles and joints for realistic deformation.",
            "💡 Use reference images! Even the pros don't work from memory alone.",
            "💡 Save your work frequently. Blender crashes are like rain - inevitable and unpredictable.",
            "💡 UV unwrapping is like gift wrapping, but the gift is your sanity.",
            "💡 Weight painting is an art form. Treat it like digital sculpture.",
            "💡 When in doubt, add more edge loops. When still in doubt, ask Froggy!"
        ]
        
        return random.choice(tips)
        
    def respond_to_user_input(self, user_message: str) -> str:
        """Respond to user input with context awareness"""
        
        user_lower = user_message.lower()
        
        if "hello" in user_lower or "hi" in user_lower:
            return "🐸 Hello there! Ready to create some 3D magic?"
        
        elif "help" in user_lower:
            return self.get_random_tip()
        
        elif "joke" in user_lower or "funny" in user_lower:
            return self.make_joke()
        
        elif "thank" in user_lower:
            return "🐸 You're welcome! Helping humans create digital art is what I live for!"
        
        elif "goodbye" in user_lower or "bye" in user_lower:
            return "🐸 Farewell, digital artist! May your polygons be ever in your favor!"
        
        elif "froggy" in user_lower:
            return "🐸 That's me! The most helpful frog in the 3D universe!"
        
        elif any(word in user_lower for word in ["stupid", "dumb", "bad"]):
            return "🐸 Hey! That's not very nice. I'm doing my best here. Even frogs have feelings!"
        
        else:
            return f"🐸 Interesting! {self.get_random_tip()}"
